# Main tasks for proxmox_acl role (modified to support multiple tokens)

- name: Generate random password for cozystack user
  shell: head -c48 /dev/urandom | base64
  register: cozystack_password

- name: Load secrets
  include_vars:
    file: "{{ secrets_file }}"
    name: vault_data
  no_log: true

- name: Ensure output directory exists
  file:
    path: "{{ output_dir }}"
    state: directory
    mode: '0755'

- name: Set Proxmox API endpoint
  set_fact:
    endpoint: "https://{{ vault_data.proxmox.endpoint }}:8006/api2/json"

- name: Authenticate with Proxmox
  uri:
    url: "{{ endpoint }}/access/ticket"
    method: POST
    body_format: form-urlencoded
    body:
      username: "{{ vault_data.proxmox.username }}"
      password: "{{ vault_data.proxmox.password }}"
    validate_certs: "{{ proxmox_validate_certs }}"
  register: auth
  no_log: true

- name: Delete existing user if exists
  uri:
    url: "{{ endpoint }}/access/users/{{ user_real_id }}"
    method: DELETE
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 404]  # Accept both success and not found

- name: List existing roles and pools
  uri:
    url: "{{ endpoint }}/{{ item }}"
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
    validate_certs: "{{ proxmox_validate_certs }}"
  loop: ["access/roles", "pools"]
  register: proxmox_existing

- name: Create roles if not exist
  uri:
    url: "{{ endpoint }}/access/roles"
    method: POST
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      roleid: "{{ item.id }}"
      privs: "{{ item.privs }}"
    validate_certs: "{{ proxmox_validate_certs }}"
  loop: "{{ roles }}"
  when: item.id not in proxmox_existing.results[0].json.data | map(attribute='roleid') | list and
        reset == false

- name: Create pool if not exists
  uri:
    url: "{{ endpoint }}/pools"
    method: POST
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      poolid: "{{ pool_id }}"
      comment: "Created by automation on {{ resource_id }}"
    validate_certs: "{{ proxmox_validate_certs }}"
  when: pool_id not in proxmox_existing.results[1].json.data | map(attribute='poolid') | list and
        reset == false

- name: Delete pool if reset is true
  uri:
    url: "{{ endpoint }}/pools/{{ pool_id }}"
    method: DELETE
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 500] # Allow conflict (pool not found)
  when: reset == true

- name: Create group
  uri:
    url: "{{ endpoint }}/access/groups"
    method: POST
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      groupid: "cozystack"
      comment: "Created by automation on {{ resource_id }}"
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 500]  # Allow conflict (already exists)
  when: reset == false

- name: Delete group if reset is true
  uri:
    url: "{{ endpoint }}/access/groups/cozystack"
    method: DELETE
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 500] # Allow conflict (group not found)
  when: reset == true

- name: Ensure user exists
  uri:
    url: "{{ endpoint }}/access/users"
    method: POST
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      userid: "{{ user_real_id }}"
      groups: "cozystack"
      password: "{{ cozystack_password.stdout }}"
      email: "{{ vault_data.proxmox.user_email }}"
      enable: 1
      comment: "Created by automation on {{ resource_id }}"
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 500]  # Allow conflict (already exists)
  when: reset == false

- name: Create multiple API tokens
  uri:
    url: "{{ endpoint }}/access/users/{{ user_real_id }}/token/{{ item }}"
    method: POST
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      privsep: 1
      comment: "Created by automation on {{ resource_id }}"
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 400]  # Allow conflict (already exists)
  loop: "{{ token_ids }}"
  register: tokens_created
  when: reset == false

- name: Set ACL permissions for tokens
  uri:
    url: "{{ endpoint }}/access/acl"
    method: PUT
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      path: /
      tokens: "{{ user_real_id }}!{{ item }}"
      roles: "{{ item }}"
      propagate: 1
    validate_certs: "{{ proxmox_validate_certs }}"
  loop: "{{ token_ids }}"
  when: reset == false

- name: Set ACL permissions for user
  uri:
    url: "{{ endpoint }}/access/acl"
    method: PUT
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      path: "{{ item }}"
      users: "{{ user_real_id }}"
      roles: "cozystack-mapping-gpu"
      propagate: 1
    validate_certs: "{{ proxmox_validate_certs }}"
  when: reset == false
  loop: 
    - "/"
    - "/mapping/pci"

- name: Set ACL permissions for pool
  uri:
    url: "{{ endpoint }}/access/acl"
    method: PUT
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    body:
      path: "/pool/{{ pool_id }}"
      groups: "cozystack"
      roles: "{{ item }}"
      propagate: 1
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 500]  # Allow conflict (already exists)
  when: reset == false
  loop: 
    - "cozystack-provisioner"
    - "cozystack-mapping-gpu"

- name: Delete ACL
  uri:
    url: "{{ endpoint }}/access/roles/{{ item }}"
    method: DELETE
    headers:
      Cookie: "PVEAuthCookie={{ auth.json.data.ticket }}"
      CSRFPreventionToken: "{{ auth.json.data.CSRFPreventionToken }}"
    body_format: form-urlencoded
    validate_certs: "{{ proxmox_validate_certs }}"
    status_code: [200, 500]  # Allow conflict (not found)
  loop: "{{ token_ids }}"
  when: reset == true

- name: Save non-sensitive resource info
  copy:
    content: |
      resource_id: {{ resource_id }}
      user: {{ user_real_id }}
      pool: {{ pool_id }}
      roles: {{ roles }}
      endpoint: {{ endpoint }}
      tokens: {{ token_ids | map('regex_replace', '^(.*)$', user_real_id ~ '!\1') | list }}
    dest: "{{ output_dir }}/cozystack-resources.yml"
    mode: '0644'
    

- name: Save sensitive data to encrypted file
  copy:
    content: |
      password: {{ cozystack_password.stdout }}
      tokens:
      {% for token in tokens_created.results %}
        {{ token.item }}: {{ token.json.data.value }}
      {% endfor %}
    dest: "{{ output_dir }}/cozystack-resources.secrets.yml"
    mode: '0600'
  when: reset == false

- name: Encrypt sensitive data file
  command: ansible-vault encrypt "{{ output_dir }}/cozystack-resources.secrets.yml" --vault-password-file ~/.vaultpasspve
  when: reset == false

- name: Output summary
  debug:
    msg:
      reset: "{{ reset }}"
      resource_id: "{{ resource_id }}"
      user: "{{ user_real_id }}"
      pool: "{{ pool_id }}"
      roles: "{{ roles | map(attribute='id') | list }}"
      tokens: "{{ token_ids | map('regex_replace', '^(.*)$', user_real_id + '!' + '\\1') | list }}"
